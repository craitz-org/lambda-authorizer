frameworkVersion: '2 || 3'

custom:
  lambda_name: lambda-authorizer-${opt:stage, 'dev'}

service: ${self:custom.lambda_name}

provider:
  name: aws
  endpointType: REGIONAL
  lambdaHashingVersion: 20201221
  stackName: ${self:custom.lambda_name}
  runtime: nodejs14.x
  role: arn:aws:iam::248567781489:role/lambda-authorizer-role
  deploymentBucket:
    name: craitzus-veliti
  apiGateway:
    # restApiId: ${file(./config.${opt:stage, 'dev'}.json):restApiId}
    # restApiRootResourceId: ${file(./config.${opt:stage, 'dev'}.json):restApiRootResourceId}
    restApiId: ubyh63c352
    restApiRootResourceId: 8sgb7a887g

functions:
  func:
    handler: index.handler
    name: ${self:custom.lambda_name}
    memorySize: 256
    timeout: 30
    description: Authorization microservice
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1        
    package:
      exclude:
        - .serverless/**
        - node_modules/**
        - test/**
    events:
      - http:
          path: v1/token
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/x-www-form-urlencoded: >
                { 
                  "body-json": $input.json("$") 
                }
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*"httpStatus":400.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }
              401:
                pattern: '.*"httpStatus":401.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }
              500:
                pattern: '.*"httpStatus":500.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }                  